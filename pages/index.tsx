import Head from 'next/head'
import styles from '../styles/Home.module.css'
import SingleRecipe from './Recipe'
import CreateRecipe from './CreateRecipe'
import { useEffect, useState } from 'react'
import { DBGetRecipes, Recipe } from '../database/RecipeRepository'
import { getAuth, GoogleAuthProvider, signInWithPopup, User } from "firebase/auth"
import { subscribe } from '../misc/events'
import { UserContext } from '../misc/contexts'

export default function Home() {
  const [recipes, setRecipes] = useState([] as Recipe[])
  const [isLoggedIn, setLoggedIn] = useState(false)
  const [user, setUser] = useState({} as User)
  const [showCreateRecipe, setShowCreateRecipe] = useState(false)
  
  useEffect(() => {
    DBGetRecipes().then(result => {
      setRecipes(result)
    })

    subscribe('createdRecipe', () => {
      DBGetRecipes().then(result => {
        setRecipes(result)
      })
    })

    subscribe('closeCreateRecipe', () => {
      setShowCreateRecipe(false)
    })
  }, [])

  const authorize = () => {
    const auth = getAuth()
    const provider = new GoogleAuthProvider()
    signInWithPopup(auth, provider).then((result) => {
      console.log('authorized!')
      setUser(result.user)
      setLoggedIn(true)
    })
  }

  const toggleCreateRecipe = () => {
    setShowCreateRecipe(!showCreateRecipe)
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <UserContext.Provider value={user}>
          <button onClick={authorize}>{isLoggedIn ? 'You are logged in!' : 'Login with Google'}</button>
          {isLoggedIn &&
            <button onClick={toggleCreateRecipe}>Create new recipe</button>
          }
          {showCreateRecipe &&
            <CreateRecipe></CreateRecipe>
          }
          {recipes.map(recipe => 
            <SingleRecipe {...recipe}></SingleRecipe>
          )}
        </UserContext.Provider>
      </main>
    </>
  )
}
